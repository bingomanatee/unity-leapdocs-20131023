using UnityEngine;
using System.Collections;
//using Leap;

public class LeapManager : MonoBehaviour
{
	public GameObject cursor;
	private static LeapManager manager;
	private static LightedPodium lockedPodium = null;
	public GameObject ceilingLight, fillLight, topLight;
	private float CEILING_LIGHT_MAX_INTENSITY, FILL_LIGHT_INTENSITY, TOP_LIGHT_INTENSITY;
	private const float LIGHT_GROW = 0.1f;
	// Use this for initialization
	void Start ()
	{
		CEILING_LIGHT_MAX_INTENSITY = LightCast (ceilingLight).intensity;
		LightCast (ceilingLight).intensity = CEILING_LIGHT_MAX_INTENSITY / 100f;
		FILL_LIGHT_INTENSITY = LightCast (fillLight).intensity;
		LightCast (fillLight).intensity = FILL_LIGHT_INTENSITY / 100f;
		TOP_LIGHT_INTENSITY = LightCast (topLight).intensity;
		LightCast (topLight).intensity = TOP_LIGHT_INTENSITY / 100f;
		manager = this;
		
		TellWeb ("unity started");
	}
	
	// Update is called once per frame
	void Update ()
	{
		TellWeb ("unity running");

			HighlightCursorTarget ();

			
		if (LightCast (ceilingLight).intensity < CEILING_LIGHT_MAX_INTENSITY) {
			LightCast (ceilingLight).intensity += LIGHT_GROW;
		}
		if (LightCast (fillLight).intensity < FILL_LIGHT_INTENSITY) {
			LightCast (fillLight).intensity += LIGHT_GROW;
		}
		if (LightCast (topLight).intensity < TOP_LIGHT_INTENSITY) {
			LightCast (topLight).intensity += LIGHT_GROW;
		}
	}
	
	public static bool PodiumLocked (LightedPodium podium)
	{
		return podium == lockedPodium;
	}
	
	public static bool PodiumLocked ()
	{
		return lockedPodium != null;
	}
	
	public static void TellWeb (string s)
	{
		Application.ExternalCall ("HearSomethingFromUnity", s);	
	}
	
	public static Light LightCast (GameObject gobj)
	{ 
		return (Light)gobj.GetComponent ("Light");
	}
	
	public static void lockPodium (LightedPodium podium)
	{
		
		if (!lockedPodium) { // must unlock first
			lockedPodium = podium;
			PageMessage ("UnityDocTopic", podium.messageWhenLocked);
		}
		
	}
	
	private  static void PageMessage (string fn, string msg)
	{
		Application.ExternalCall (fn, msg);
	}
	
	public static void unlockPodium ()
	{
		lockedPodium = null;
	}
	
/*	private string CleanRots (Finger finger)
	{
		Vector3 rot = finger.Direction.ToUnity ();
		
		int x = (int)(rot.x * 10);
		int y = (int)(rot.y * 10);
		int z = (int)(rot.z * 10);
		
		return " X: " + x .ToString () + ", Y: " + y.ToString () + ", Z: " + z.ToString ();
	}
	*/
	private void HighlightCursorTarget ()
	{
		
		if (CursorScript.Cast (cursor).myTarget != null) {
			PodiaTarget.Cast (CursorScript.Cast (cursor).myTarget).Target ();
		}
		
	}
		/*
	private void MoveCursor ()
	{
				
		if (null == leapController) {
			leapController = new Controller ();   
		}
		if (null == leapController)
			return;
		
		Frame frame = leapController.Frame ();
		
		CursorScript.Cast (cursor).MoveByFrame (frame);

	} */
}
