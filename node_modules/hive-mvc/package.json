{
  "name": "hive-mvc",
  "description": "a high level framework for large scale sites",
  "version": "0.1.1",
  "private": false,
  "scripts": {
    "start": "node index"
  },
  "devDependencies": {
    "tap": ">=0.3"
  },
  "dependencies": {
    "underscore.string": "*",
    "async": "~0.1.22",
    "gate": "0.3.0",
    "underscore": "~1.4.4",
    "mkdirp": ">=0.3.4",
    "rmdir": ">0.1",
    "hive-configuration": "0.0.1a",
    "hive-component": "0.0.1a",
    "hive-loader": "0.0.2",
    "hive-model": "0.1.0",
    "support": "~1.1.3",
    "cli-table": "~0.2",
    "request": "~2.12",
    "node-logger": "0.0.1"
  },
  "readme": "hive-mvc\n=======\n\nThe next evolution of nuby-express; an advanced, RAD environment for Express sites.\n\nNuby Express has proven successful at managing large projects; however it did not load\n(not respond, load) fast enough for Nodejitsu and it had issues with require pathing.\n\nHiveMVC is going to address some of the failings of NE and provide additional functionality:\n\n* The ability to attach itself to an existing Express.js project\n* The ability to launch and add actions to a running project\n* Better ability to respond at any point in the loading process\n* The ability to mock data sets and cache results for \"de facto\" unit tests\n* Abstracting responses from HTTP to model expert / non-http systems\n* The ability to \"hot swap\" patches to a working system.\n* A complete data backup and import system to enable transport of data between local and remote systems.\n* A simpler hierarchy of containers above the Action level\n* A reconsideration of static serving to bind static directories to specific components, allowing for functional filtering of static data\n* A callback-centric pipeline inside actions.\n\nThis on top of the existing feature set of Nuby Express\n\n* Highly configurable convention based routing and configuration of actions\n* A very action-centric system of web application design\n* Support for local static file hosting at each action\n* Strong system of layouts with local hosting of layout static files\n* Designed for a large and growing single page(s) application\n* A strong family of helper libraries for your custom application\n\nBasic Architectural Concepts\n============================\n\nHive-mvc is built using the follwoing foundational modules:\n\n1) hive-configuration - a system for laoding configuration from JSON files or modules.\n2) Hive-component - a \"widget factory\" framework for building up a widget based on configuration and mixins. Designed\n   to allow for multiple inputs for both.\n3) Hive-model - Although you'll want a \"real\"repo for your application data, hive-model is used for internal state\n   keeping inside hive-mvc. ** All internal hive-mvc model names begin with a \"$\" so you shouldn't see namespace\n   collision.\n4) Hive-loader - to bootstrap the application from the file system Hive-loader scans the frames in your application\n   into your running application ('apiary').\n\nHive is \"action centric\" - all power is given to the action; you could even hypothetically run an entire site off a\nsingle action.\n\nThe full genus is\n\nAPIARY : FRAME : HIVE : ACTION\n\nActions\n-------\n\nActions are designed to respond to one OR MORE url endpoints; and so, a single action can respond to an entire REST\nsystem. They can serve their own static files as well.\n\nAction configurations must have one or more entries in the routes object as in\n\n<code>\n{\n   \"response\": {\n   \t\"get\": [\"/foo/bar\", \"foo/bar/:id/\", \"foo/bar/:id/:element\"],\n   \t\"post\": \"/foo/bar/:id\"\n   }\n}\n\n</code>\n\nActions' code is made up of a series of handlers, defined in a [action_name]_actions.js code file:\n\nON_VALIDATE, ON_INPUT, ON_PROCESS, ON_OUTPUT\n\nThere are \"hooks\" for managing specific stages of a response; you don't have to hand code overrides for each of these\nmethods -- for instance, if you have no need for security on a response, you can skip the on_validate hook.\n\neach of these methods have the following signatures:\n\n<code>\non_[method](ctx, callback) {\n\t....\n\n\tcallback();\n}\n\nThese callbacks are managed by async.waterfall and shouldn't be called directly.\n\nAlso, you can define your own action pipeline by overriding the pipe property of the action (see action/respond.js).\n\nContext\n-------\n\nThe context object has a lot of local properties:\n\n* $apiary\n* $req and $res, express objects\n\nand one public property\n* out, a hive-collection\n\nbut by design, other than out, the context should be easily mockable and these properties ignored unless needed.\n\nHives\n-----\n\nHives are groups of actions -- as in \"a hive of activity\". They can have specific resources to augment their\nfunctionality.\n\nFrames\n------\n\nFrames are groups of hives. A frame should be as self-sufficient as possible in delivering functionality - you should\nbe able to pull a frame off a git repo and run it as is.\n\nApiary\n------\n\nAn apiary is the \"world\" of a hive-mvc app. It contains the server and app from express, all the resources, actions,\nand hives, and a dataspace for all the models. The apiary is injected into all the loaders and handlers of the\nbootstrapping process as well as the configurations of the actions, hives and frames. It is exposed to the resource\nfactories as well.\n\nThe apiary is intended to serve as a global space for the web application where needed. It is what allows you to load\na resource or model from one part of your web application and have it available wherever you need it.\n\nResources\n=========\n\nResources are a vague concept, by design. They have the same application space as a node module,\nbut unlike node modules they are registered by name in a global object space (apiary.Resource.list model) and are\ntyped.\n\nDepending on the resources type, they are injected as different points in the lifecycle of the application.\n\n* mixins are executed once, at startup. They must have a resopnd(cb) method.\n* view_helpers are executed between the end of an action and the view rendering of the template.\n* models are instantiated and added to the apiary dataspace. note that there is no requirement for a model resource to\n  be an instance of hive-model - the only requirement of a model is that it have a unique name property.\n* generic resources are called and executed manually, where needed.\n\nresource files are required and registered in the Resource.list model as is, so any node file that exports a function\nwith the following signature\n\n<code>\nmodule.exports = function(apiary, cb){\n\tvar dataspace = apiary.dataspace;\n\t....\n\tcb(null, myResource);\n}\n</code>\nwith a name is a legitimate resource. Given that the apiary itself can be configured with database identity/security\net.al, and has the dataspace this function is a good place to transport this information into models and other\nutilities.\n\n\n\nHive and Express\n================\n\nWhere nuby-express internalized the express app, in hive, the assumption is you already have an express application,\nand you are looking to scale and better organize it. So hive wraps itself around an existing application, using the app\nand server as resources of the apiary. The apiary is the top level singleton of your site.*\n\nHere is a typical bootstrap file with express and hive-mvc working in concert:\n\n<code>\n/**\n * Module dependencies.\n */\n\nvar express = require('express')\n\t, routes = require('./routes')\n\t, user = require('./routes/user')\n\t, http = require('http')\n\t, mvc = require('./../../index')\n\t, util = require('util')\n\t, path = require('path');\n\nmodule.exports = function (port, cb) {\n\n\tvar app, server;\n\tapp = express();\n\n\tapp.configure(function () {\n\t\tapp.set('port', port || 3000);\n\t\tapp.set('views', __dirname + '/views');\n\t\tapp.engine('html', require('ejs').renderFile);\n\t\tapp.use(express.favicon());\n\t\tapp.use(express.logger('dev'));\n\t\tapp.use(express.bodyParser());\n\t\tapp.use(express.methodOverride());\n\t\tapp.use(express.cookieParser('your secret here'));\n\t\tapp.use(express.session());\n\t\tapp.use(app.router);\n\t\t// app.use(require('less-middleware')({ src: __dirname + '/public' }));\n\t\tapp.use(express.static(path.join(__dirname, 'public')));\n\t});\n\n\tapp.configure('development', function () {\n\t\tapp.use(express.errorHandler());\n\t});\n\n\tapp.get('/', routes.index);\n\tapp.get('/users', user.list);\n\n\tserver = http.createServer(app);\n\tserver.on('close', function () {\n\t\tconsole.log('======== closing server');\n\t\tapiary.emit('close_server');\n\t});\n\n\tserver.listen(app.get('port'), function () {\n\t\tvar apiary = mvc.Apiary({},  path.join(__dirname, 'frames'));\n\t\tconsole.log('initializing apiary');\n\t\tapiary.init(function () {\n\t\t\tapiary.serve(app, server);\n\t\t\tif (cb) {\n\t\t\t\tcb(null, apiary);\n\t\t\t}\n\t\t});\n\t});\n\n\treturn server;\n}\n</code>\n\nNote that hive-mvc only kicks in AFTER the server has started to listen. Based on an unpleasant experience at a node\nknockout (aptly named in my part, as the Nodejitsu system couldn't support nuby-express) I have decided to begin\nbootstrapping hive-mvc AFTER the server has started to listen to a port.\n\nThe app and server are injected into the apiary in the serve portion of the bootstrapping.\n\nNote that up to the point where you call server.listen, the configuration is 99% arbitrary - you can use whatever\nconfig you like for express.\n\nThe only part of the app.configure that is important to hive is the app.engine; right now hive has only been tested\nusing html files interpreted by ejs. Also, note that hive-mvc internalizes views in each individual action, so while\nits fine to have/maintain your views folder for raw Express endpoints, you won't need it for hive.\n\n---------------------\n* While the architecture is designed to allow for multiple apiaries, its never been tested and I couldn't see the\npoint.\n** Hive-model does have quantum-read-write to a file system, and so is good for mocks, but its not built to be\nproduction performant for real world repos.",
  "readmeFilename": "README.md",
  "_id": "hive-mvc@0.1.1",
  "dist": {
    "shasum": "5ea364ffe539d83acc415faf7f6e15219d898054"
  },
  "_from": "hive-mvc@",
  "_resolved": "https://registry.npmjs.org/hive-mvc/-/hive-mvc-0.1.1.tgz"
}
